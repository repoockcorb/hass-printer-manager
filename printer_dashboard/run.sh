#!/bin/bash
set -e

# ==============================================================================
# Start the Printer Dashboard add-on
# ==============================================================================

echo "[INFO] Starting Printer Dashboard..."

# Export environment variables for the Flask app
export SUPERVISOR_TOKEN="${SUPERVISOR_TOKEN}"
export HASSIO_TOKEN="${HASSIO_TOKEN}"
export HOME_ASSISTANT_URL="http://supervisor/core"

# Create data directory if it doesn't exist
mkdir -p /data

# -----------------------------------------------------------------------------
# Generate dynamic nginx proxy config for printers
# -----------------------------------------------------------------------------
PRINTERS_JSON="/data/options.json"
NGINX_UPSTREAMS="/etc/nginx/conf.d/printers_upstreams.conf"
NGINX_LOCATIONS="/etc/nginx/conf.d/printers_locations.conf"

mkdir -p /etc/nginx/conf.d

echo "# autogenerated upstreams on $(date)" > "$NGINX_UPSTREAMS"
echo "# autogenerated locations on $(date)" > "$NGINX_LOCATIONS"

# Iterate over printers array (if any)
if [ -f "$PRINTERS_JSON" ]; then
    PRINTER_COUNT=$(jq '.printers | length' "$PRINTERS_JSON" 2>/dev/null || echo 0)
    if [ "$PRINTER_COUNT" -gt 0 ]; then
        jq -c '.printers[]' "$PRINTERS_JSON" | while read -r PRN; do
            NAME=$(echo "$PRN" | jq -r '.name' | tr ' ' '_' | tr '[:upper:]' '[:lower:]')
            URL=$(echo  "$PRN" | jq -r '.url')

            # if url is relative (starts with /proxy/) skip, it already targets proxy
            if echo "$URL" | grep -qE '^https?://'; then
                # strip protocol and possible trailing slash
                HOST=$(echo "$URL" | sed -E 's#^https?://##' | sed 's#/*$##')

                cat >> "$NGINX_UPSTREAMS" <<EOF

upstream ${NAME}_up {
    server ${HOST};
}

EOF

                cat >> "$NGINX_LOCATIONS" <<EOF

location /proxy/${NAME}/ {
    proxy_pass         http://${NAME}_up/;
    proxy_set_header   Host \$host;
    proxy_set_header   X-Real-IP \$remote_addr;
    proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Proto \$scheme;
    proxy_http_version 1.1;
    proxy_buffering    off;
}

EOF
            fi
        done
    fi
fi

echo "[INFO] Generated dynamic printer proxy config:"
cat "$NGINX_UPSTREAMS"
cat "$NGINX_LOCATIONS"

# Start nginx in background
echo "[INFO] Starting nginx..."
nginx &

# Function to handle shutdown gracefully
shutdown() {
    echo "[INFO] Shutting down services..."
    pkill -f "python3 app.py" || true
    pkill nginx || true
    exit 0
}

# Trap signals for graceful shutdown
trap shutdown SIGTERM SIGINT

# Start the Flask application in foreground
echo "[INFO] Starting Python Flask backend..."
cd /app
python3 app.py &

# Wait for background processes
wait 